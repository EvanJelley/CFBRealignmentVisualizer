# Generated by Django 5.0.6 on 2024-06-17 21:03

from django.db import migrations
import os
import sqlite3


def conferenceByYearBuilder(apps, schema_editor):
    ConferenceName = apps.get_model('conferences', 'ConferenceName')
    School = apps.get_model('conferences', 'School')
    Year = apps.get_model('conferences', 'Year')
    ConferenceByYear = apps.get_model('conferences', 'ConferenceByYear')

    for file in os.listdir("ConferenceByEraDB/"):
        if file.endswith(".db"):
            if file == "GeoCenters.db" or file == "ConferenceSummary.db":
                continue
            else:
                db_path = os.path.join(os.getcwd(), "ConferenceByEraDB", file)
                conn = sqlite3.connect(db_path)
                confName = file.split(".")[0]
                ConferenceName.objects.create(name=confName)
                cursor = conn.cursor()
                tables = cursor.execute("SELECT name FROM sqlite_master WHERE type='table';").fetchall()
                for table in tables:
                    table_name = table[0]
                    startYear = int(table_name.split("_")[1])
                    if table_name.split("_")[2] != "Present":
                        endYear = int(table_name.split("_")[2]) - 1
                    else:
                        endYear = 2024
                    for year in range(startYear, endYear + 1):
                        if not Year.objects.filter(year=year).exists():
                            Year.objects.create(year=year)
                        cursor.execute("SELECT * FROM " + table_name)
                        SportSeperatorFlag = False
                        fullMemberSchools = []
                        fballOnlySchools = []
                        bballOnlySchools = []
                        for row in cursor.fetchall():
                            schoolName = row[0]
                            City = row[1].split(",")[0].strip()
                            State = row[1].split(",")[1].strip()
                            if int(row[2]) == 1 and int(row[3]) == 1:
                                fullMemberSchools.append(schoolName)
                            elif int(row[2]) == 1:
                                SportSeperatorFlag = True
                                fballOnlySchools.append(schoolName)
                            elif int(row[3]) == 1:
                                SportSeperatorFlag = True
                                bballOnlySchools.append(schoolName)
                            Lat = row[4]
                            Lon = row[5]
                            if not School.objects.filter(name=schoolName).exists():
                               School.objects.create(name=schoolName, city=City, state=State, latitude=Lat, longitude=Lon)                            
                        if SportSeperatorFlag:
                            bBallSchools = fullMemberSchools + bballOnlySchools
                            fBallSchools = fullMemberSchools + fballOnlySchools
                            fball_conference = ConferenceByYear.objects.create(year=Year.objects.get(year=year), 
                                                           conference=ConferenceName.objects.get(name=confName), 
                                                           football=True, 
                                                           basketball=False)
                            fball_conference.schools.set(School.objects.filter(name__in=fBallSchools))
                            bball_conference = ConferenceByYear.objects.create(year=Year.objects.get(year=year),
                                                           conference=ConferenceName.objects.get(name=confName),
                                                           football=False,
                                                           basketball=True)
                            bball_conference.schools.set(School.objects.filter(name__in=bBallSchools))
                        else:
                            conference_by_year = ConferenceByYear.objects.create(year=Year.objects.get(year=year),
                                                           conference=ConferenceName.objects.get(name=confName),
                                                           football=True,
                                                           basketball=True)
                            conference_by_year.schools.set(School.objects.filter(name__in=fullMemberSchools))
                conn.close()


class Migration(migrations.Migration):

    dependencies = [
        ('conferences', '0008_majorcity_conferencebyyear_avgdistancebetweenschools_and_more'),
    ]

    operations = [
        migrations.RunPython(conferenceByYearBuilder),
    ]
